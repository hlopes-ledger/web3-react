import {
  CheckSupportResult,
  EthereumProvider,
  loadConnectKit,
  SupportedProviderImplementations,
  SupportedProviders,
} from '@ledgerhq/connect-kit-loader'
import { Actions, Connector, Provider, ProviderRpcError } from '@web3-react/types'
import EventEmitter3 from 'eventemitter3'

import { getBestUrlMap, getChainsWithDefault } from './utils'

export const URI_AVAILABLE = 'URI_AVAILABLE'
const DEFAULT_TIMEOUT = 5000

function parseChainId(chainId: string | number) {
  // Convert the chain ID from a string to a number if it's a hexadecimal string
  return typeof chainId === 'string' ? Number.parseInt(chainId, 16) : chainId
}

type LedgerProvider = Provider & EthereumProvider

/**
 * Options to configure the Ledger Connect Kit.
 * For the full list of options, see {@link }.
 */
export type LedgerOptions = {
  projectId: string
  chains: number[]
  optionalChains?: number[]
  methods?: string[]
  optionalMethods?: string[]
  events?: string[]
  optionalEvents?: string[]
  /**
   * Map of chainIds to rpc url(s). If multiple urls are provided, the first one that responds
   * within a given timeout will be used. Note that multiple urls are not supported by WalletConnect by default.
   * That's why we extend its options with our own `rpcMap` (@see getBestUrlMap).
   */
  rpcMap?: { [chainId: number]: string | string[] }
  relayUrl?: string
}

/**
 * Options to configure the WalletConnect connector.
 */
export interface LedgerConstructorArgs {
  actions: Actions
  /** Options to pass to `@walletconnect/ethereum-provider`. */
  options: LedgerOptions
  /** The chainId to connect to in activate if one is not provided. */
  defaultChainId?: number
  /**
   * @param timeout - Timeout, in milliseconds, after which to treat network calls to urls as failed when selecting
   * online urls.
   */
  timeout?: number
  /**
   * @param onError - Handler to report errors thrown from WalletConnect.
   */
  onError?: (error: Error) => void
}

export class Ledger extends Connector {
  public provider?: LedgerProvider
  public readonly events = new EventEmitter3()

  private connectKitPromise
  private checkSupportResult?: CheckSupportResult
  private eagerConnection?: Promise<LedgerProvider>

  private readonly options: Omit<LedgerOptions, 'rpcMap' | 'chains'>
  private readonly rpcMap?: Record<number, string | string[]>
  private readonly chains: number[]
  private chainId: number

  private readonly defaultChainId?: number
  private readonly timeout: number

  constructor({ actions, options, defaultChainId, timeout = DEFAULT_TIMEOUT, onError }: LedgerConstructorArgs) {
    //constructor({ actions, options, onError }) {
    super(actions, onError)

    // Set the chain ID, chainHex, and RPC endpoint from the options object
    this.chains = options.chains
    this.rpcMap = options.rpcMap

    // Load the ConnectKit library and store the promise in a member variable
    this.connectKitPromise = loadConnectKit()

    // Initialize the provider to undefined
    this.provider = undefined
  }

  private disconnectListener = (error: ProviderRpcError) => {
    this.actions.resetState()
    if (error) this.onError?.(error)
  }

  private chainChangedListener = (chainId: string): void => {
    this.actions.update({ chainId: Number.parseInt(chainId, 16) })
  }

  private accountsChangedListener = (accounts: string[]): void => {
    this.actions.update({ accounts })
  }

  private URIListener = (uri: string): void => {
    this.events.emit(URI_AVAILABLE, uri)
  }

  private isomorphicInitialize(
    desiredChainId: number | undefined = this.defaultChainId
    // ): Promise<WalletConnectProvider> {
  ): Promise<LedgerProvider> {
    if (this.eagerConnection) return this.eagerConnection

    const rpcMap = this.rpcMap ? getBestUrlMap(this.rpcMap, this.timeout) : undefined
    const chains = desiredChainId ? getChainsWithDefault(this.chains, desiredChainId) : this.chains

    return (this.eagerConnection = loadConnectKit().then(async (connectKit) => {
      this.checkSupportResult = connectKit.checkSupport({
        providerType: SupportedProviders.Ethereum,
        walletConnectVersion: 2,
        chains,
        rpcMap: await rpcMap,
      })
      // const provider = (this.provider = (await connectKit.getProvider()) as WalletConnectProvider)
      const provider = (this.provider = (await connectKit.getProvider()) as LedgerProvider)
      provider.on('disconnect', this.disconnectListener)
      provider.on('chainChanged', this.chainChangedListener)
      provider.on('accountsChanged', this.accountsChangedListener)
      provider.on('display_uri', this.URIListener)

      return provider
    }))
  }

  async connectEagerly() {
    // cancelActivation means starting a new Activation -> Start the activation
    const cancelActivation = this.actions.startActivation()

    try {
      const provider = await this.isomorphicInitialize()

      // WalletConnect automatically persists and restores active sessions
      if (!provider || !provider.session) {
        throw new Error('No active session found. Connect your wallet first.')
      }

      // Get the chain ID and accounts from the provider and update the state
      const [chainId, accounts] = await Promise.all([
        provider.request({ method: 'eth_chainId' }) as Promise<string>,
        provider.request({ method: 'eth_accounts' }) as Promise<string[]>,
      ])
      this.actions.update({ chainId: parseChainId(chainId), accounts })
    } catch (error) {
      // Reset the state and re-throw the error
      this.actions.resetState()
      throw error
    } finally {
      // Stop the activation
      cancelActivation()
    }
  }

  /**
   * method starts the activation, checks if the provider is supported, and if so,
   * gets the provider. It then gets the chain ID and accounts from the provider and
   * updates the state. If there is an error, the state is reset and the error is re-thrown.
   *
   * @param desiredChainId - The desired chainId to connect to.
   */
  public async activate(desiredChainId?: number): Promise<void> {
    // If the window is undefined or there's no document, return early since we can't do anything on a server side rendering
    if (typeof window === 'undefined' || !window.document) return

    const provider = await this.isomorphicInitialize(desiredChainId)

    if (
      this.checkSupportResult.providerImplementation == SupportedProviderImplementations.WalletConnect &&
      provider.session
    ) {
      if (!desiredChainId || desiredChainId === 1) return

      // WalletConnect exposes connected accounts, not chains: `eip155:${chainId}:${address}`
      const isConnectedToDesiredChain = provider.session.namespaces.eip155.accounts.some((account) =>
        account.startsWith(`eip155:${desiredChainId}:`)
      )
      if (!isConnectedToDesiredChain) {
        if (this.options.optionalChains?.includes(desiredChainId)) {
          throw new Error(
            `Cannot activate an optional chain (${desiredChainId}), as the wallet is not connected to it.\n\tYou should handle this error in application code, as there is no guarantee that a wallet is connected to a chain configured in "optionalChains".`
          )
        }
        throw new Error(
          `Unknown chain (${desiredChainId}). Make sure to include any chains you might connect to in the "chains" or "optionalChains" parameters when initializing WalletConnect.`
        )
      }
      return provider.request<void>({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${desiredChainId.toString(16)}` }],
      })
    }

    const cancelActivation = this.actions.startActivation()

    try {
      // Get the chain ID and accounts from the provider and update the state
      const [chainId, accounts] = await Promise.all([
        provider.request({ method: 'eth_chainId' }) as Promise<string>,
        provider.request({ method: 'eth_accounts' }) as Promise<string[]>,
      ])
      this.actions.update({ chainId: parseChainId(chainId), accounts })
    } catch (error) {
      await this.deactivate()
      cancelActivation()
      throw error
    }
  }

  // Reset provider and state
  async deactivate() {
    if (this.provider) {
      this.provider = undefined
    }
    this.actions.resetState()
  }
}
